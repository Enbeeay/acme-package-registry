#!/usr/bin/env python3
import os
import sys
import typer
from src.logging_config import setup_logging

app = typer.Typer()

@app.command()
def install():
    """Install dependencies in userland."""
    import subprocess
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--user', '-r', 'requirements.txt'])
        raise typer.Exit(0)
    except Exception as e:
        print(f"Install failed: {e}", file=sys.stderr)
        raise typer.Exit(1)

@app.command()
def test():
    """Run tests and print coverage summary."""
    import subprocess
    try:
        result = subprocess.run([sys.executable, '-m', 'pytest', '--cov=src', '--cov-report=term-missing'], capture_output=True, text=True)
        print(result.stdout)
        if result.returncode == 0:
            raise typer.Exit(0)
        else:
            print(result.stderr, file=sys.stderr)
            raise typer.Exit(1)
    except Exception as e:
        print(f"Test failed: {e}", file=sys.stderr)
        raise typer.Exit(1)

@app.command()
def main(url_file: str = typer.Argument(..., help="Path to file with URLs")):
    """Process a file of URLs and evaluate models."""
    setup_logging()
    # TODO: Implement main logic
    print(f"Processing {url_file}")
    raise typer.Exit(0)

if __name__ == "__main__":
    app()
